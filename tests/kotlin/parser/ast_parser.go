// Code generated by daniil-ushkov LL(1) parser generator; DO NOT EDIT.
package parser

import (
	"fmt"
	"strconv"
)

func __fmt_unused_import_ignore() {
	fmt.Print()
}

func __strconv_unused_import_ignore() {
	_, _ = strconv.Atoi("12345")
}

type Parser struct {
	Lexer Lexer
}

func (__p *Parser) Parse() (Ast, error) {
	return __p.ParseSig()
}

func (p *Parser) ParseSig() (Ast, error) {
	var ast Ast = &AstNonTerminal{NonTerminal: Sig}
	var tmpAst Ast
	var err error

	_ = ast
	_ = tmpAst
	_ = err

	switch p.Lexer.Get().Symbol {
	case FUN:
		if p.Lexer.Get().Symbol != FUN {
			return nil, fmt.Errorf("FUN expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

		if p.Lexer.Get().Symbol != ID {
			return nil, fmt.Errorf("ID expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

		if p.Lexer.Get().Symbol != LP {
			return nil, fmt.Errorf("LP expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

		tmpAst, err = p.ParseParams()
		if err != nil {
			return nil, err
		}
		ast.AddChild(tmpAst)

		if p.Lexer.Get().Symbol != RP {
			return nil, fmt.Errorf("RP expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

		tmpAst, err = p.ParseRet()
		if err != nil {
			return nil, err
		}
		ast.AddChild(tmpAst)

	default:
		return nil, fmt.Errorf("unexpected symbol: %s, rest: (%s, \"%s\")", p.Lexer.Get().Symbol.String(), p.Lexer.Next.Symbol.String(), p.Lexer.Input)
	}

	return ast, nil
}

func (p *Parser) ParseParams() (Ast, error) {
	var ast Ast = &AstNonTerminal{NonTerminal: Params}
	var tmpAst Ast
	var err error

	_ = ast
	_ = tmpAst
	_ = err

	switch p.Lexer.Get().Symbol {
	case ID:
		tmpAst, err = p.ParseParam()
		if err != nil {
			return nil, err
		}
		ast.AddChild(tmpAst)

		tmpAst, err = p.ParseParams1()
		if err != nil {
			return nil, err
		}
		ast.AddChild(tmpAst)
	case RP:
	default:
		return nil, fmt.Errorf("unexpected symbol: %s, rest: (%s, \"%s\")", p.Lexer.Get().Symbol.String(), p.Lexer.Next.Symbol.String(), p.Lexer.Input)
	}

	return ast, nil
}

func (p *Parser) ParseParam() (Ast, error) {
	var ast Ast = &AstNonTerminal{NonTerminal: Param}
	var tmpAst Ast
	var err error

	_ = ast
	_ = tmpAst
	_ = err

	switch p.Lexer.Get().Symbol {
	case ID:
		if p.Lexer.Get().Symbol != ID {
			return nil, fmt.Errorf("ID expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

		if p.Lexer.Get().Symbol != COL {
			return nil, fmt.Errorf("COL expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

		if p.Lexer.Get().Symbol != ID {
			return nil, fmt.Errorf("ID expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

	default:
		return nil, fmt.Errorf("unexpected symbol: %s, rest: (%s, \"%s\")", p.Lexer.Get().Symbol.String(), p.Lexer.Next.Symbol.String(), p.Lexer.Input)
	}

	return ast, nil
}

func (p *Parser) ParseParams1() (Ast, error) {
	var ast Ast = &AstNonTerminal{NonTerminal: Params1}
	var tmpAst Ast
	var err error

	_ = ast
	_ = tmpAst
	_ = err

	switch p.Lexer.Get().Symbol {
	case COM:
		if p.Lexer.Get().Symbol != COM {
			return nil, fmt.Errorf("COM expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

		tmpAst, err = p.ParseParam()
		if err != nil {
			return nil, err
		}
		ast.AddChild(tmpAst)

		tmpAst, err = p.ParseParams1()
		if err != nil {
			return nil, err
		}
		ast.AddChild(tmpAst)
	case RP:
	default:
		return nil, fmt.Errorf("unexpected symbol: %s, rest: (%s, \"%s\")", p.Lexer.Get().Symbol.String(), p.Lexer.Next.Symbol.String(), p.Lexer.Input)
	}

	return ast, nil
}

func (p *Parser) ParseRet() (Ast, error) {
	var ast Ast = &AstNonTerminal{NonTerminal: Ret}
	var tmpAst Ast
	var err error

	_ = ast
	_ = tmpAst
	_ = err

	switch p.Lexer.Get().Symbol {
	case COL:
		if p.Lexer.Get().Symbol != COL {
			return nil, fmt.Errorf("COL expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()

		if p.Lexer.Get().Symbol != ID {
			return nil, fmt.Errorf("ID expected")
		}
		ast.AddChild(&AstTerminal{Token: p.Lexer.Get()})
		p.Lexer.MoveNext()
	case EOF:
	default:
		return nil, fmt.Errorf("unexpected symbol: %s, rest: (%s, \"%s\")", p.Lexer.Get().Symbol.String(), p.Lexer.Next.Symbol.String(), p.Lexer.Input)
	}

	return ast, nil
}
